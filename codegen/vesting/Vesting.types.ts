/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Uint128 = string;
export interface AllocationResponse {
  amount: Uint128;
  amount_withdrawn: Uint128;
  start_time_of_allocation: number;
  vesting_period: VestingPeriod;
}
export interface VestingPeriod {
  cliff: number;
  linear: number;
}
export type Addr = string;
export interface Config {
  mbrn_denom: string;
  osmosis_proxy: Addr;
  owner: Addr;
  staking_contract: Addr;
  total_allocation: Uint128;
}
export type ExecuteMsg = {
  add_recipient: {
    recipient: string;
  };
} | {
  remove_recipient: {
    recipient: string;
  };
} | {
  add_allocation: {
    allocation: Uint128;
    recipient: string;
    vesting_period?: VestingPeriod | null;
  };
} | {
  withdraw_unlocked: {};
} | {
  claim_feesfor_contract: {};
} | {
  claim_feesfor_recipient: {};
} | {
  submit_proposal: {
    description: string;
    expedited: boolean;
    link?: string | null;
    messages?: ProposalMessage[] | null;
    title: string;
  };
} | {
  cast_vote: {
    proposal_id: number;
    vote: ProposalVoteOption;
  };
} | {
  update_config: {
    additional_allocation?: Uint128 | null;
    mbrn_denom?: string | null;
    osmosis_proxy?: string | null;
    owner?: string | null;
    staking_contract?: string | null;
  };
};
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  stargate: {
    type_url: string;
    value: Binary;
    [k: string]: unknown;
  };
} | {
  ibc: IbcMsg;
} | {
  wasm: WasmMsg;
} | {
  gov: GovMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export type IbcMsg = {
  transfer: {
    amount: Coin;
    channel_id: string;
    timeout: IbcTimeout;
    to_address: string;
    [k: string]: unknown;
  };
} | {
  send_packet: {
    channel_id: string;
    data: Binary;
    timeout: IbcTimeout;
    [k: string]: unknown;
  };
} | {
  close_channel: {
    channel_id: string;
    [k: string]: unknown;
  };
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type GovMsg = {
  vote: {
    proposal_id: number;
    vote: VoteOption;
    [k: string]: unknown;
  };
};
export type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export type ProposalVoteOption = "for" | "against" | "amend" | "remove" | "align";
export interface ProposalMessage {
  msg: CosmosMsgForEmpty;
  order: Uint64;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  initial_allocation: Uint128;
  mbrn_denom: string;
  osmosis_proxy: string;
  owner?: string | null;
  pre_launch_community: string[];
  pre_launch_contributors: string;
  staking_contract: string;
}
export type QueryMsg = {
  config: {};
} | {
  allocation: {
    recipient: string;
  };
} | {
  unlocked_tokens: {
    recipient: string;
  };
} | {
  recipient: {
    recipient: string;
  };
} | {
  recipients: {};
};
export type AssetInfo = {
  token: {
    address: Addr;
  };
} | {
  native_token: {
    denom: string;
  };
};
export interface RecipientResponse {
  allocation?: Allocation | null;
  claimables: Asset[];
  recipient: string;
}
export interface Allocation {
  amount: Uint128;
  amount_withdrawn: Uint128;
  start_time_of_allocation: number;
  vesting_period: VestingPeriod;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
}
export interface RecipientsResponse {
  recipients: RecipientResponse[];
}
export interface UnlockedResponse {
  unlocked_amount: Uint128;
}